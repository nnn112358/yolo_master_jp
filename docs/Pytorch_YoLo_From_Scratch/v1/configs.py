import torch
import platform

# 模型超参数
S = 7  # 网格的尺寸。YOLO算法将输入图像划分为S×S的网格，每个网格预测B个边界框和每个框的类别概率。
B = 2  # 每个网格预测的边界框数量。YOLOv1每个网格预测B个边界框（通常为2）。
D = 448  # 输入图像的尺寸。YOLOv1输入图像大小为448×448像素。这个参数定义了输入图像的宽度和高度。

# 损失函数超参数
L_COORD = 5.0  # 坐标损失的权重。YOLO损失函数中坐标（边界框的中心坐标和宽高）的损失乘以L_COORD，用于放大坐标误差的影响。
L_NOOBJ = 0.5  # 负样本（没有目标）的损失权重。该参数控制背景区域的损失，低值表示对背景区域的误差容忍度较高。

# 数据增强超参数
HUE = 0.1  # 色相调整的范围。用于数据增强中的颜色变化，可以改变图像的色调。
SATURATION = 1.5  # 饱和度调整的范围。用于增强图像的饱和度，使图像色彩更加鲜艳或黯淡。
EXPOSURE = 1.5  # 曝光度调整的范围。用于改变图像的亮度，增强图像亮暗的变化。

RESIZE_PROB = 0.2  # 随机调整图像大小的概率。定义每个图像在数据增强时被调整大小的概率。
ZOOM_OUT_PROB = 0.4  # 随机缩小图像的概率。用于模拟目标被放大或缩小的场景。
ZOOM_IN_PROB = 0.4  # 随机放大图像的概率。通过在图像上执行缩放操作来增强数据。
JITTER = 0.2  # 图像随机抖动的强度。通过随机裁剪图像来改变图像内容，增强训练集的多样性。

# 数据加载超参数
BATCH = 64  # 每个训练批次的样本数量。定义了每个训练步骤中使用的图像数量。
SUBDIVISIONS = 8  # 梯度累积的次数。这个值通常用于显存不足时，允许通过多个小批次的累积计算来减少内存开销。
NUM_WORKERS = 0 if platform.system() == 'Windows' else 10  # 数据加载时使用的工作线程数量。这个参数决定了加载数据的并行处理数量，可以加速数据读取。
SHUFFLE = True  # 是否打乱数据。在每个epoch开始时，是否将训练数据打乱顺序，以提高训练效果。
PIN_MEMORY = True  # 是否将数据加载到固定内存中。如果为True，数据加载器将数据从CPU内存中预取到GPU，以加速GPU的数据处理。
DROP_LAST = True  # 是否丢弃最后一个批次。在数据加载过程中，如果数据不能完全组成一个批次，是否丢弃最后剩余的样本。

# 训练超参数
MAX_EPOCHS = 156  # 最大训练轮数。模型训练的最大迭代次数，训练将在达到该值时停止。
INIT_LR = 0.0005  # 初始学习率。训练开始时的学习率，影响模型参数更新的步伐。
BURN_IN = 100  # 预热阶段的批次数。在训练的初期，学习率逐渐增大，这有助于避免模型的梯度爆炸。
BURN_IN_POW = 2.0  # 预热学习率增长的幂次。该参数控制学习率增加的速率，较高的值表示更快的学习率增长。
LR_SCHEDULE = [(750, 2.0),  # 学习率调度表。包含一组元组，表示在特定步数（如750）时，学习率的缩放因子（如2.0）。
               (1500, 2.0),
               (2250, 1.25),
               (3250, 1.60),
               (5500, 1.25),
               (15000, 0.8),
               (20000, 0.625),
               (25000, 0.8),
               (30000, 0.5),
               (35000, 0.5)]
MOMENTUM = 0.9  # 动量。动量是优化算法的一种技术，它能加速梯度下降，避免陷入局部最小值。
WEIGHT_DECAY = 0.0005  # 权重衰减（L2正则化）。防止模型过拟合的正则化方法，它通过加权的方式约束模型的参数值。

# VOC数据集路径
PASCAL_VOC_DIR_PATH = "data/voc/VOC_Detection"  # PASCAL VOC数据集的路径。YOLO模型训练通常使用PASCAL VOC数据集，定义数据集的存储路径。

# 计算设备（如果可用则使用GPU）
DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'  # 确定模型训练使用的硬件设备。如果有可用的GPU，则使用GPU；否则，使用CPU。

# 检查点超参数
LOAD_MODEL = None  # 加载预训练模型的方式。'pretrain'表示加载预训练的模型权重，'resume'表示从中断的地方恢复训练，None表示重新训练。
PRETRAINED_MODEL_WEIGHTS = "checkpoints/pretrained_model_weights.pt"  # 预训练模型的权重文件路径。用于从已训练的模型恢复权重。
TRAINING_CHECKPOINT_PATH = "checkpoints/training_checkpoint.pt"  # 训练过程中的检查点路径。训练过程中每隔一定步数会保存模型和优化器状态。
TRAINED_MODEL_WEIGHTS = "checkpoints/trained_model_weights.pt"  # 最终训练好的模型权重保存路径。
CHECKPOINT_T = 10  # 保存检查点的频率。训练过程每隔CHECKPOINT_T个epoch保存一次模型和优化器的状态。
